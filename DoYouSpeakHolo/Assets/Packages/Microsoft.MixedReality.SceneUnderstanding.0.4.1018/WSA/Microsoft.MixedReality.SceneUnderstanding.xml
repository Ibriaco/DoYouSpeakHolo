<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.MixedReality.SceneUnderstanding</name>
  </assembly>
  <members>
    <member name="N:Microsoft.MixedReality.SceneUnderstanding">
      <summary>Contains the SDK for interacting with the mixed reality Microsoft.MixedReality.SceneUnderstanding runtime.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneComponent">
      <summary>The base class for all types in a Scene. Components are referenced by an instance of Id.</summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneComponent.#ctor">
      <summary>Default class constructor.</summary>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneComponent.Id">
      <summary>A unique identifier that allows for referential access and queries of components in the scene.</summary>
      <returns>A reference to the identifier.</returns>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneObject">
      <summary>
        Scene objects represent a single “thing” or “object" sensed in the scene. Example scene objects might include objects such as walls, floors, etc. Scene objects are
        further composed out of multiple components, which collectively are the representation of that singular "SceneObject" concept. For example, a wall scene object could be composed out of the
        component collection: Mesh, BoundingBox, Transform. Thus, the scene object's primary purpose is to define the set of components that collectively represent the object.
        Note that components may be referenced by multiple scene object instances.
      </summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObject.#ctor">
      <summary>Default class constructor.</summary>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneObject.Quads">
      <summary>Returns a list of quads that are referenced by this scene object.</summary>
      <returns>The list of all quads referenced by this scene object.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneObject.Meshes">
      <summary>Returns a list of meshes that are referenced by this scene object.</summary>
      <returns>The list of all meshes referenced by this scene object.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneObject.Position">
      <summary>The position of the scene object.</summary>
      <returns>The position vector.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneObject.Orientation">
      <summary>The orientation of the scene object.</summary>
      <returns>The orientation quaterion.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObject.LocationAsMatrix">
      <summary>The translation/rotation of the scene object as a composed transformation matrix. Transforms are represented by a 3x3 rotation R in row major and 3x1 translation T in the following form: [ R 0 ] [ T 1 ]</summary>
      <returns>The transformation matrix.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneObject.Kind">
      <summary>Describes the scene object type as classified by the inference engine.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind">
      <summary>Describes the kind of SceneObject that this specific instance is. All components that are associated with this SceneObject are of the same kind.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.Background">
      <summary>This type of scene object is discovered by the runtime but is not one of the recognizable types.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.Wall">
      <summary>A physical wall that is part of the building structure. Walls are assumed to be immovable structures.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.Floor">
      <summary>Floors are any surfaces on which one can walk. There is no explicit assumption of a singular floor, any walkable surface should be identified as a floor.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.Ceiling">
      <summary>The upper surface of a room.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.Platform">
      <summary>Horizontal surfaces with a surface area of at least 1 square meter. This classification is only available when EnableSceneObjectQuads is set to true in the SceneQuerySettings struct that is passed to the Scene's compute call.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.Unknown">
      <summary>This scene object has yet to be classified and assigned a kind.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.CompletelyInferred">
      <summary>This scene object has been completely inferred. It might represent a valid surface that hasn't been observed at all or it was created primarily for the purpose of providing a watertight mesh.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObjectKind.World">
      <summary>Defines a subset of the scene itself. This suggests that the scene object describes geometry but is not decomposed by class. It is also possible that this scene object can contain data that could be classified by other labels. For example this could be a mesh that has doors and walls and tables etc...</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.Id">
      <summary>A globally unique identifier for a component.</summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Id.#ctor">
      <summary>Default class constructor.</summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Id.Equals(System.Object)">
      <summary></summary>
      <param name="other"></param>
      <returns></returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Id.GetHashCode">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneMesh">
      <summary>A mesh is an object made up of a set of polygonal faces. It is defined as an unordered indexed triangle list to an array of 3D vertex positions. </summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneMesh.#ctor">
      <summary>Default class constructor.</summary>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneMesh.TriangleIndexCount">
      <summary>Returns the number of triangle indices that the mesh contains.</summary>
      <returns>The number of triangle indices that the mesh contains.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneMesh.VertexCount">
      <summary>Returns the number of triangle vertices that the mesh contains.</summary>
      <returns>The number of triangle vertices that the mesh contains.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneMesh.GetTriangleIndices(System.UInt32[])">
      <summary>Fills a buffer with the set of all mesh triangle indices. The array must be of TriangleIndexCount() size or greater.</summary>
      <param name="indexBuffer">The index buffer to be filled.</param>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneMesh.GetVertexPositions(Single[])">
      <summary>Fills a vertex position array with the mesh vertex positions. Vertices are defined as a buffer of XYZ triples.</summary>
      <param name="vertices">The array of triangle position vectors to be filled. The size of the buffer must be of size VertexCount() * 3 or greater.</param>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneRegionSurfaceKind">
      <summary>A description of the area on the quad under this cell. This provides a detailed description of the true surface area of the quad surface.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneRegionSurfaceKind.SurfaceInferred">
      <summary>This area is assumed to be part of the surface as inferred by the inference engine.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneRegionSurfaceKind.NotSurface">
      <summary>This area is contained in the quad but not part of the surface, i.e. it is either empty space or some other object is taking up this space.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneRegionSurfaceKind.SurfaceObserved">
      <summary>This area is known to be part of the surface and was seen directly by the sensor.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneQuadAlignment">
      <summary>Describes the alignment of a quad in the real world with respect to gravity.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuadAlignment.NonOrthogonal">
      <summary>A quad that is neither aligned horizontally nor vertically.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuadAlignment.Horizontal">
      <summary>A quad that is aligned horizontally in the real world with respect to gravity.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuadAlignment.Vertical">
      <summary>A quad that is aligned vertically in the real world with respect to gravity.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneQuad">
      <summary>
        A quad is a rectangle aligned with a planar surface in the scene. Within a quad, coordinates are given as 2D offsets from the top - left corner of the quad, with X coordinates increasing to the right,
        and Y coordinates increasing down. Thus, a quad can be considered as a 2D drawing canvas posed in 3D space. The quad's local 3D space has the origin at the centroid of the quad.
      </summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneQuad.#ctor">
      <summary>Default class constructor.</summary>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneQuad.Extents">
      <summary>The full width and height of the quad in meters.</summary>
      <returns>The full width and height of the quad in meters.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.SceneQuad.Alignment">
      <summary>The alignment of the quad in the real world with respect to gravity.</summary>
      <returns>The alignment of the quad in the real world with respect to gravity.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneQuad.FindCentermostPlacement(System.Numerics.Vector2,System.Numerics.Vector2@)">
      <summary>Attempts to find a location on the quad that can hold an object.The function is given 2D bounding regions of the object to be placed and will find the most centered location that satisfies the size constraints. The API does not rotate the object, so it only looks for locations that are aligned with the quad axis.</summary>
      <param name="objectExtent">The 2D extents of the object that is to be placed.</param>
      <param name="placementCenter">The location of the placement center.</param>
      <returns>The function returns true if a suitable placement location was found. Otherwise, if e.g. the given object bounds are too large, the function returns false to indicate no suitable placement location was found.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneQuad.GetSurfaceMask(System.UInt16,System.UInt16,System.Byte[])">
      <summary>
        Computes which regions of the quad represent the actual surface instead of empty space. The API quantizes the quad at a specified resolution dividing it into cells. Each cell is tristate, either empty, surface or inferred.
      </summary>
      <param name="maskWidth">The x resolution of the output mask.</param>
      <param name="maskHeight">The y resolution of the output mask.</param>
      <param name="surfaceMask">
        A linear array with a stride of maskWidth cells that represents the surface of the quad. Each entry in the array represents if the area under that discretized
        space is empty or if it’s an actual surface.
      </param>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneMeshLevelOfDetail">
      <summary>Specifies the level of detail for the requested mesh data.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneMeshLevelOfDetail.Coarse">
      <summary>Requests a rough approximation of the scene represented by the smallest number of triangles. This representation generates roughly 100 triangles per cubic meter.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneMeshLevelOfDetail.Fine">
      <summary>Requests a detailed approximation of the scene represented by the largest number of triangles. This representation generates roughly 2000 triangles per cubic meter.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneMeshLevelOfDetail.Medium">
      <summary>Requests an approximation of the scene that balances detail and triangle count. This representation generates roughly 400 triangles per cubic meter.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings">
      <summary>Flags passed to the runtime to enable or disable component types or subsets of the runtime for memory or performance reasons.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings.EnableSceneObjectQuads">
      <summary>Requests quads for scene objects. Quads are 2D objects that represent scene objects as planar surfaces.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings.EnableSceneObjectMeshes">
      <summary>Requests meshes for scene objects. Meshes are 3D objects that represent scene objects as a list of vertices and triangle indices.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings.EnableOnlyObservedSceneObjects">
      <summary>Requests scene objects that have been observed by the system. When disabled, the system does additional inference of the scene object geometry which results in fewer, larger and more complete scene objects, but does require more compute and memory.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings.EnableWorldMesh">
      <summary>Requests a mesh representation for the entire scene. The world mesh is represented as a list of vertices and triangle indices. The world mesh is not segmented by class and it does not persist between scene updates. This data provides the most accurate representation of the real-world surfaces that the system has observed.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings.RequestedMeshLevelOfDetail">
      <summary>Requests a particular level of detail for the world mesh. This setting only takes effect when EnableWorldMesh is set to true.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.Scene">
      <summary>
        The Scene provides information about the current scene in the form of scene objects and their associated components.
      </summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Scene.#ctor">
      <summary>Initializes a new instance of a scene context.</summary>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.Scene.OriginSpatialGraphNodeId">
      <summary>A reference to the spatial coordinate system for this scene. All objects in the scene are rendered relative to this coordinate system.</summary>
      <returns>The node Id for the spatial coordinate system of the scene.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.Scene.SceneObjects">
      <summary>Returns all SceneObjects in the current scene.</summary>
      <returns>All SceneObjects in the current scene.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Scene.FindComponent(Microsoft.MixedReality.SceneUnderstanding.SceneComponentId)">
      <summary>Returns the component that is associated with the specified Id.</summary>
      <param name="id">The Id of the component.</param>
      <returns>The component that is associated with the specified Id.</returns>
    </member>
    <member name="P:Microsoft.MixedReality.SceneUnderstanding.Scene.NodeId">
      <summary>A reference to the spatial coordinate system for this scene. All objects in the scene are rendered relative to this coordinate system.</summary>
      <returns>The node Id for the spatial coordinate system as of the scene.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Scene.Deserialize(System.Byte[])">
      <summary>Deserializes a previously computed scene.</summary>
      <param name="serializedScene">The serialized scene.</param>
      <returns>The scene object.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Scene.Deserialize(System.Byte[],Microsoft.MixedReality.SceneUnderstanding.Scene)">
      <summary>Deserializes a previously computed scene.</summary>
      <param name="serializedScene">The serialized scene.</param>
      <param name="previousScene">The computed scene will attempt to track and persist objects from the previously computed scene provided.</param>
      <returns>The scene object.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.Scene.UpdateFromPrevious(Microsoft.MixedReality.SceneUnderstanding.Scene)">
      <summary>Performs a scene to scene update from a previously computed scene. This operation will attempt to retain consistent object->id mappings maintaining object permanence.</summary>
      <param name="previousScene">The previous scene. The current scene will attempt to re-map Ids of identical objects to enable object permanence.</param>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneObserverAccessStatus">
      <summary>Describes the status of the access request made by the RequestAccessAsync call.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObserverAccessStatus.Allowed">
      <summary>Access to SceneObserver and its Compute* methods is allowed.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObserverAccessStatus.DeniedBySystem">
      <summary>Access to SceneObserver and its Compute* methods is denied by the system.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObserverAccessStatus.DeniedByUser">
      <summary>Access to SceneObserver and its Compute* methods is denied by the user.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObserverAccessStatus.NotDeclaredByApp">
      <summary>Access to SceneObserver and its Compute* methods is not allowed because the spatialPerception capability has not been requested by the app.</summary>
    </member>
    <member name="F:Microsoft.MixedReality.SceneUnderstanding.SceneObserverAccessStatus.UserPromptRequired">
      <summary>Access to SceneObserver and its Compute* methods is gated by a user prompt.</summary>
    </member>
    <member name="T:Microsoft.MixedReality.SceneUnderstanding.SceneObserver">
      <summary>
        The SceneObserver is the main entry class for Scene Understanding. It can be used to retrieve the latest scene as an object or as a byte array.
      </summary>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObserver.IsSupported()">
      <summary>Checks if Scene Observer is supported on the platform.</summary>
      <returns>True if supported. False, otherwise.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObserver.RequestAccessAsync()">
      <summary>Requests access to Scene Observer provided data. This needs to be called once initially, before calling any of the SceneObserver.Compute* methods.</summary>
      <returns>The status of the access request.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObserver.ComputeAsync(Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings,System.Single)">
      <summary>Computes the latest scene. The compute operation will generate representations for all sensed scene objects around the sensor within a specified radius.</summary>
      <param name="settings">Flags passed to the runtime to enable/disable component types or subsets of the runtime for memory or performance reasons.</param>
      <param name="queryRadius">The radius (in meters) of the query sphere.</param>
      <returns>An asynchronous operation that returns a scene when it completes.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObserver.ComputeAsync(Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings,System.Single,Microsoft.MixedReality.SceneUnderstanding.Scene)">
      <summary>Computes the latest scene. The compute operation will generate representations for all sensed scene objects around the sensor within a specified radius.</summary>
      <param name="settings">Flags passed to the runtime to enable/disable component types or subsets of the runtime for memory or performance reasons.</param>
      <param name="queryRadius">The radius (in meters) of the query sphere.</param>
      <param name="previousScene">The computed scene will attempt to track and persist objects from the previously computed scene provided.</param>
      <returns>An asynchronous operation that returns a scene when it completes.</returns>
    </member>
    <member name="M:Microsoft.MixedReality.SceneUnderstanding.SceneObserver.ComputeSerializedAsync(Microsoft.MixedReality.SceneUnderstanding.SceneQuerySettings,System.Single)">
      <summary>Computes the latest scene and returns it as a serialized blob for future deserialization. The compute operation will generate representations for all sensed scene objects around the sensor within a specified radius.</summary>
      <param name="settings">Flags passed to the runtime to enable/disable component types or subsets of the runtime for memory or performance reasons.</param>
      <param name="queryRadius">The radius (in meters) of the query sphere.</param>
      <returns>An asynchronous operation that returns a scene in serialized form when it completes.</returns>
    </member>
  </members>
</doc>